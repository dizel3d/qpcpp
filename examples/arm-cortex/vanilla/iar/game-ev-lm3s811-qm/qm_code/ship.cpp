//////////////////////////////////////////////////////////////////////////////
// Model: game.qm
// File:  ./qm_code/ship.cpp
//
// This file has been generated automatically by QP Modeler (QM).
// DO NOT EDIT THIS FILE MANUALLY.
//
// Please visit www.state-machine.com/qm for more information.
//////////////////////////////////////////////////////////////////////////////
#include "qp_port.h"
#include "bsp.h"
#include "game.h"

/* Q_DEFINE_THIS_FILE */

#define SHIP_WIDTH  5
#define SHIP_HEIGHT 3

// encapsulated delcaration of the Ship active object ------------------------
// $(AOs::Ship) ..............................................................
class Ship : public QActive {
private:
    uint8_t m_x;
    uint8_t m_y;
    uint8_t m_exp_ctr;
    uint16_t m_score;

public:
    Ship() : QActive((QStateHandler)&Ship::initial), m_x(GAME_SHIP_X), m_y(GAME_SHIP_Y) {
    }

protected:
    static QState initial(Ship *me, QEvent const *e);
    static QState active(Ship *me, QEvent const *e);
    static QState parked(Ship *me, QEvent const *e);
    static QState flying(Ship *me, QEvent const *e);
    static QState exploding(Ship *me, QEvent const *e);
};

// local objects -------------------------------------------------------------
static Ship l_ship;             // the sole instance of the Ship active object

// Public-scope objects ------------------------------------------------------
QActive * const AO_Ship = (QActive *)&l_ship;                // opaque pointer

// Active object definition --------------------------------------------------
// $(AOs::Ship) ..............................................................

// $(AOs::Ship::Statechart) ..................................................
// @(/2/1/5/0)
QState Ship::initial(Ship *me, QEvent const *e) {
    me->subscribe(TIME_TICK_SIG);
    me->subscribe(PLAYER_TRIGGER_SIG);

    // object dictionary for Ship object...
    QS_OBJ_DICTIONARY(&l_ship);

    // function dictionaries for Ship HSM...
    QS_FUN_DICTIONARY(&Ship::initial);
    QS_FUN_DICTIONARY(&Ship::active);
    QS_FUN_DICTIONARY(&Ship::parked);
    QS_FUN_DICTIONARY(&Ship::flying);
    QS_FUN_DICTIONARY(&Ship::exploding);

    // local signals...
    QS_SIG_DICTIONARY(PLAYER_SHIP_MOVE_SIG, &l_ship);
    QS_SIG_DICTIONARY(TAKE_OFF_SIG,         &l_ship);
    QS_SIG_DICTIONARY(HIT_WALL_SIG,         &l_ship);
    QS_SIG_DICTIONARY(HIT_MINE_SIG,         &l_ship);
    QS_SIG_DICTIONARY(DESTROYED_MINE_SIG,   &l_ship);
    return Q_TRAN(&Ship::active);
}
// $(AOs::Ship::Statechart::active) ..........................................
QState Ship::active(Ship *me, QEvent const *e) {
    switch (e->sig) {
        // @(/2/1/5/1/0)
        case Q_INIT_SIG: {
            return Q_TRAN(&Ship::parked);
        }
        // @(/2/1/5/1/1)
        case PLAYER_SHIP_MOVE_SIG: {
            me->m_x = ((ObjectPosEvt const *)e)->x;
            me->m_y = ((ObjectPosEvt const *)e)->y;
            return Q_HANDLED();
        }
    }
    return Q_SUPER(&QHsm::top);
}
// $(AOs::Ship::Statechart::active::parked) ..................................
QState Ship::parked(Ship *me, QEvent const *e) {
    switch (e->sig) {
        // @(/2/1/5/1/2/0)
        case TAKE_OFF_SIG: {
            return Q_TRAN(&Ship::flying);
        }
    }
    return Q_SUPER(&Ship::active);
}
// $(AOs::Ship::Statechart::active::flying) ..................................
QState Ship::flying(Ship *me, QEvent const *e) {
    switch (e->sig) {
        // @(/2/1/5/1/3)
        case Q_ENTRY_SIG: {
            ScoreEvt *sev;

            me->m_score = 0;  // reset the score
            sev = Q_NEW(ScoreEvt, SCORE_SIG);
            sev->score = me->m_score;
            AO_Tunnel->postFIFO(sev);
            return Q_HANDLED();
        }
        // @(/2/1/5/1/3/0)
        case TIME_TICK_SIG: {
            // tell the Tunnel to draw the Ship and test for hits
            ObjectImageEvt *oie = Q_NEW(ObjectImageEvt, SHIP_IMG_SIG);
            oie->x   = me->m_x;
            oie->y   = me->m_y;
            oie->bmp = SHIP_BMP;
            AO_Tunnel->postFIFO(oie);

            ++me->m_score; // increment the score for surviving another tick

            if ((me->m_score % 10) == 0) { // is the score "round"?
                ScoreEvt *sev = Q_NEW(ScoreEvt, SCORE_SIG);
                sev->score = me->m_score;
                AO_Tunnel->postFIFO(sev);
            }
            return Q_HANDLED();
        }
        // @(/2/1/5/1/3/1)
        case PLAYER_TRIGGER_SIG: {
            ObjectPosEvt *ope = Q_NEW(ObjectPosEvt, MISSILE_FIRE_SIG);
            ope->x = me->m_x;
            ope->y = me->m_y + SHIP_HEIGHT - 1;
            AO_Missile->postFIFO(ope);
            return Q_HANDLED();
        }
        // @(/2/1/5/1/3/2)
        case DESTROYED_MINE_SIG: {
            me->m_score += ((ScoreEvt const *)e)->score;
            // the score will be sent to the Tunnel by the next TIME_TICK
            return Q_HANDLED();
        }
        // @(/2/1/5/1/3/3)
        case HIT_WALL_SIG: {
            return Q_TRAN(&Ship::exploding);
        }
        // @(/2/1/5/1/3/4)
        case HIT_MINE_SIG: {
            return Q_TRAN(&Ship::exploding);
        }
    }
    return Q_SUPER(&Ship::active);
}
// $(AOs::Ship::Statechart::active::exploding) ...............................
QState Ship::exploding(Ship *me, QEvent const *e) {
    switch (e->sig) {
        // @(/2/1/5/1/4)
        case Q_ENTRY_SIG: {
            me->m_exp_ctr = 0;
            return Q_HANDLED();
        }
        // @(/2/1/5/1/4/0)
        case TIME_TICK_SIG: {
            // @(/2/1/5/1/4/0/0)
            if (me->m_exp_ctr < 15) {
                ObjectImageEvt *oie;

                ++me->m_exp_ctr;

                 // tell the Tunnel to draw the current stage of Explosion
                oie = Q_NEW(ObjectImageEvt, EXPLOSION_SIG);
                oie->bmp = EXPLOSION0_BMP + (me->m_exp_ctr >> 2);
                oie->x   = me->m_x; // x of explosion
                oie->y   = (int8_t)((int)me->m_y - 4 + SHIP_HEIGHT);
                AO_Tunnel->postFIFO(oie);
                return Q_HANDLED();
            }
            // @(/2/1/5/1/4/0/1)
            else {
                ScoreEvt *gameOver = Q_NEW(ScoreEvt, GAME_OVER_SIG);
                gameOver->score = me->m_score;
                AO_Tunnel->postFIFO(gameOver);
                return Q_TRAN(&Ship::parked);
            }
        }
    }
    return Q_SUPER(&Ship::active);
}

