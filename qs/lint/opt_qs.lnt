//////////////////////////////////////////////////////////////////////////////
// Product:  QS/C++
// Last Updated for Version: 3.4.00
// Date of the Last Update:  Sep 01, 2007
//
//                    Q u a n t u m     L e a P s
//                    ---------------------------
//                    innovating embedded systems
//
// Copyright (C) 2002-2007 Quantum Leaps, LLC. All rights reserved.
//
// This software may be distributed and modified under the terms of the GNU
// General Public License version 2 (GPL) as published by the Free Software
// Foundation and appearing in the file GPL.TXT included in the packaging of
// this file. Please note that GPL Section 2[b] requires that all works based
// on this software must also be made publicly available under the terms of
// the GPL ("Copyleft").
//
// Alternatively, this software may be distributed and modified under the
// terms of Quantum Leaps commercial licenses, which expressly supersede
// the GPL and are specifically designed for licensees interested in
// retaining the proprietary status of their code.
//
// Contact information:
// Quantum Leaps Web site:  http://www.quantum-leaps.com
// e-mail:                  info@quantum-leaps.com
//////////////////////////////////////////////////////////////////////////////

// Assertions
-emacro(970, Q_DEFINE_THIS_FILE)    // MISRA rule 13
-emacro(971, Q_DEFINE_THIS_FILE)    // MISRA rule 14
-emacro(970, Q_DEFINE_THIS_MODULE)  // MISRA rule 13
-emacro(971, Q_DEFINE_THIS_MODULE)  // MISRA rule 14
-emacro(960, Q_ASSERT)              // MISRA rule 59

// QEP
-emacro(1923, QEP_SIGNAL_SIZE)      // macro ... could become const variable
-emacro(717, Q_TRAN)          // do ... while(0)
-emacro(717, Q_TRAN_STA)      // do ... while(0)
-emacro(956, Q_TRAN_STA)      // Non const, non volatile static or external

// QS
-emacro(960, INSERT_BYTE)     // MISRA Rule 54, null statement
-emacro(960, INSERT_ESC_BYTE) // MISRA Rule 54, null statement
-DQ_SPY

// Miscallaneous
-e1924                  // C-style cast
